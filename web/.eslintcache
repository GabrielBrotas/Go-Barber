[{"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\styles\\global.ts":"1","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\App.tsx":"2","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignIn\\index.tsx":"3","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignIn\\styles.ts":"4","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Input\\styles.ts":"5","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Input\\index.tsx":"6","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Button\\styles.ts":"7","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignUp\\index.tsx":"8","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignUp\\styles.ts":"9"},{"size":462,"mtime":1611698992874,"results":"10","hashOfConfig":"11"},{"size":270,"mtime":1611703750575,"results":"12","hashOfConfig":"13"},{"size":956,"mtime":1611703418184,"results":"14","hashOfConfig":"13"},{"size":1383,"mtime":1611703298211,"results":"15","hashOfConfig":"13"},{"size":810,"mtime":1611707392769,"results":"16","hashOfConfig":"17"},{"size":2500,"mtime":1611707521235,"results":"18","hashOfConfig":"17"},{"size":382,"mtime":1611703333753,"results":"19","hashOfConfig":"17"},{"size":1359,"mtime":1611705392695,"results":"20","hashOfConfig":"17"},{"size":1383,"mtime":1611703794130,"results":"21","hashOfConfig":"13"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fn2d8",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"w8ozfy",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cplu0m",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":3,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\styles\\global.ts",[],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\App.tsx",["41"],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignIn\\index.tsx",[],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignIn\\styles.ts",[],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Input\\styles.ts",[],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Input\\index.tsx",["42"],"import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\n// extender todos os atributos que um input normal teria\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string; // tornar a tag name obrigatoria\n  icon: React.ComponentType<IconBaseProps>; // receber um componente como tipo e dentro desse componente ele vai ter os atributos que um componente do react-icons tem\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null); // criar referencia para poder acessar o elemento\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  // ! sempre que a gente altera um estado, propriedade, ou componente pai desse input ele vai ser renderizado(o componente é chamado de novo e toda função abaixo vai ser chamada tambem), tendo que resalvar as funções na memoria do zero.\n  // ? agora sempre formas usar uma função dentro de um componente ela não pode ser criada diretamente, temos que usar um hook chamado useCallback que vai guardar a função na memoria e ela só vai ser atualizada quando quisermos\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    // se o conteudo do input não estiver vazio vai ser true, se o value estiver vazio vai ser false.\n    setIsFilled(!!inputRef.current?.value);\n  }, []); // só vai recriar a função se passarmos alguma variavel dentro do array de dependencias que nem utilizamos com o useEffect\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName, // o unform as vezes altera o nome do campo entao vamos usar o fieldName que ele gera\n      ref: inputRef.current, // referencia do elemento\n      path: 'value', // quando precisar acessar o valor do input é só buscar no .value\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n    </Container>\n  );\n};\n\nexport default Input;\n","C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\components\\Button\\styles.ts",["43"],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignUp\\index.tsx",["44","45","46","47"],"C:\\Users\\win10\\OneDrive\\Área de Trabalho\\goStack\\5. GoBarber\\web\\src\\Pages\\SignUp\\styles.ts",[],{"ruleId":"48","severity":1,"message":"49","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":14},{"ruleId":"48","severity":1,"message":"52","line":23,"column":36,"nodeType":"50","messageId":"51","endLine":23,"endColumn":41},{"ruleId":"53","severity":2,"message":"54","line":19,"column":1,"nodeType":null,"endLine":20,"endColumn":1,"fix":"55"},{"ruleId":"53","severity":2,"message":"54","line":13,"column":1,"nodeType":null,"endLine":14,"endColumn":1,"fix":"56"},{"ruleId":"57","severity":2,"message":"58","line":14,"column":31,"nodeType":"59","messageId":"60","endLine":14,"endColumn":37},{"ruleId":"61","severity":1,"message":"62","line":15,"column":5,"nodeType":"63","messageId":"64","endLine":15,"endColumn":16},{"ruleId":"53","severity":2,"message":"65","line":19,"column":16,"nodeType":null,"endLine":19,"endColumn":17,"fix":"66"},"@typescript-eslint/no-unused-vars","'SignIn' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","prettier/prettier","Delete `⏎`",{"range":"67","text":"68"},{"range":"69","text":"68"},"@typescript-eslint/ban-types","Don't use `object` as a type. The `object` type is currently hard to use ([see this issue](https://github.com/microsoft/TypeScript/issues/21732)).\nConsider using `Record<string, unknown>` instead, as it allows you to more easily inspect and use the keys.","TSObjectKeyword","bannedTypeMessage","no-console","Unexpected console statement.","MemberExpression","unexpected","Delete `·`",{"range":"70","text":"68"},[378,379],"",[589,590],[690,691]]